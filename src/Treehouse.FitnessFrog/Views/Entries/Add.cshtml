@*Allows for strongly typed lambda extension method*@

@model Treehouse.FitnessFrog.Models.Entry

@using Treehouse.FitnessFrog.Models

@{
    ViewBag.Title = "Add Entry";

    //Method No. 1
    //var selectListItems = new[]
    //{
    //    new SelectListItem() { Value = "1", Text = "Item 1", Selected = false},
    //    new SelectListItem() { Value = "2", Text = "Item 2", Selected = true}
    //};

    //Method No. 2
    //var items = new[]
    //{
    //    new { Id = 1, name = "Item 1"},
    //    new { Id = 2, name = "Item 2" }
    //};

    //var selectListItems = new SelectList(items, "Id", "Name");

}

<h2>@ViewBag.Title</h2>

<!-- The selectListTimes code section above create the following-->
<!-- MVC PLAN A: Option 2 is not automatically selected since the default value is selected.
     MVC PLAN B: ModelState (i.e. selected on screen) values are selected over Model requested (i.e. selected in code afterwards) values -->
@*<select>
            <option value="1">Item 1</option>
            <option value="2" selected>Item 2</option>
    </select>*@

@using (Html.BeginForm()) // gotten rid of <form method="post">
{
    <div class="row">

        <div class="col-md-6">

            <div class="form-group">

                <!--Html helper code is not necessary but can simply code and allows for less html to be typed -->
                @*@Html.Label("Date", new { @class= "control-label" })*@    <!-- Html Helper code without Strongly Typed -->
                @*@Html.TextBox("Date", null, new { @class = "form-control" })*@    <!-- Html Helper code without Strongly Typed -->
                @Html.LabelFor(m => m.Date, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Date, "{0:d}", new { @class = "form-control datepicker" })

                @*<label for="Date" class="control-label">Date</label>
                    <input type="text" id="Date" name="Date" class="form-control" value="@ViewBag.Date" />*@
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.ActivityId, new { @class = "control-label" })
                @Html.DropDownListFor(m => m.ActivityId, (SelectList)ViewBag.ActivitiesSelectListItems, "", new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Duration, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Duration, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Intensity, new { @class = "control-label" })
                <div>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity, Entry.IntensityLevel.Low) @Entry.IntensityLevel.Low
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity, Entry.IntensityLevel.Medium) @Entry.IntensityLevel.Medium
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity, Entry.IntensityLevel.High) @Entry.IntensityLevel.High
                    </label>
</div>
            </div>

            <div class="form-group">
                <div class="checkbox">
                    <label> <!-- Label element allows you to click on the TEXT "Exclude" to check/uncheck the checkbox -->
                        @Html.CheckBoxFor(m => m.Exclude) @Html.DisplayNameFor(m => m.Exclude)
                    </label>
                </div>

                <!-- The below code does not work since only when checked does it pass "True" to the Controller. Unticked doesn't pass anything!
                     MVC uses a double atHTML method which includes a hidden <input> for sending "False" to the Controller
                
                    <input id="Exclude" name="Exclude" type="checkbox" value="True" /> Exclude
                -->
                
                @*<label for="Exclude" class="control-label">Exclude</label>
                <input type="text" id="Exclude" name="Exclude" class="form-control" value="@(ViewBag.Exclude != null ? ViewBag.Exclude.ToString() : "")" />*@
            </div>

        </div>

        <div class="col-md-6">

            <div class="form-group">
                @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                @Html.TextAreaFor(m => m.Notes, 14, 20, new { @class = "form-control" })
            </div>

        </div>

        <div class="col-md-12">
            <div class="pad-top">
                <button type="submit" class="btn btn-success btn-lg margin-right">
                    <span class="glyphicon glyphicon-save"></span> Save
                </button>
                <a href="@Url.Action("Index")" class="btn btn-warning btn-lg">
                    <span class="glyphicon glyphicon-remove"></span> Cancel
                </a>
            </div>
        </div>

    </div>
}


